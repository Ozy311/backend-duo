user www-data; # User Nginx worker processes run as

events {}

http {
    # Upstream for the Flask authentication application (Gunicorn)
    upstream flask_app {
        # Point to the Gunicorn Unix socket (Production)
        server unix:/run/backend-duo/gunicorn.sock fail_timeout=0;
        # Point to Flask development server (Debugging)
        # server 127.0.0.1:5000;
    }

    # Upstream for the backend Tomcat application
    upstream tomcat_app {
        server 127.0.0.1:8080; # Assuming Tomcat runs on port 8080
    }

    server {
        listen 80; # Listen on IPv4 Port 80
        server_name localhost; # Adjust if needed

        # Internal location for authentication checks
        location = /auth_check {
            internal; # Only accessible from within Nginx
            proxy_pass http://flask_app/auth_check;
            proxy_pass_request_body off; # No need to send body for auth check
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Cookie $http_cookie;
        }

        # Public locations proxied directly to Flask (auth/static resources)
        location /login {
            proxy_pass http://flask_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /logout {
            proxy_pass http://flask_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /duo_callback {
            proxy_pass http://flask_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /static {
            proxy_pass http://flask_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }


        # Protected location - requires authentication
        location / {
            auth_request /auth_check;
            # If auth fails (non-2xx response), redirect to login
            error_page 401 = @error401;

            proxy_pass http://tomcat_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
             # Optional: Add user info header if Flask provides it in auth_check response
            # auth_request_set $auth_user $upstream_http_x_auth_user;
            # proxy_set_header X-Authenticated-User $auth_user;
        }

        # Named location to handle the 401 error from auth_request
        location @error401 {
            # Redirect to the login page, preserving the original requested URL
            return 302 /login?redirect_uri=$request_uri;
        }

        # Custom 404 error handling
        error_page 404 = @error404;
        location @error404 {
             internal; # Only accessible internally
             return 404 "<html><body><h1>404 Not Found</h1><p>The requested resource was not found on this server.</p></body></html>";
             # Alternatively, serve a static file:
             # root /path/to/your/static/files;
             # try_files /404.html =404;
        }


        # Optional: Add access and error logging
        # Make sure these paths are writable by the Nginx user
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
    }
}

# Add 'daemon off;' or 'master_process off;' for foreground running if needed,
# usually outside the http block, depending on context (e.g., Docker).
# events {} # Basic events block might be needed depending on base nginx.conf
